#!/usr/bin/python
# -*- coding: utf-8 -*-
# {{ rm['metadata']['copyright_str'] }}
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
"""
The module file for {{ network_os }}_facts
"""

from __future__ import absolute_import, division, print_function
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.connection import Connection
from {{ import_path }}. \
     {{ network_os }}.facts.facts import Facts

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': {{ rm['metadata']['status'] }},
                    'supported_by': {{ rm['metadata']['supported_by'] }}}


DOCUMENTATION = """
---
module: {{ network_os }}_facts
version_added: {{ rm['info']['version_added'] }}
short_description: {{ rm['info']['short_description'] }}
description:
  - Collects facts from network devices running the {{ network_os }} operating
    system. This module places the facts gathered in the fact tree keyed by the
    respective resource name.  The facts module will always collect a
    base set of facts from the device and can enable or disable
    collection of additional facts.
author: {{ rm['info']['authors'] }}
options:
  gather_subset:
    description:
      - When supplied, this argument will restrict the facts collected
        to a given subset.  Possible values for this argument include
        all, and net_configuration_<resource_name>.  Can specify a
        list of values to include a larger subset.  Values can also be used
        with an initial C(M(!)) to specify that a specific subset should
        not be collected.
    required: false
    default: 'all'
    version_added: "2.9"
"""

EXAMPLES = """
# Gather all facts
- {{ network_os }}_facts:
    gather_subset: all

# Collect only the {{ resource }} and default facts
- {{ network_os }}_facts:
    gather_subset:
      - net_configuration_{{ resource }}

# Do not collect {{ resource }} facts
- {{ network_os }}_facts:
    gather_subset:
      - "!net_configuration_{{ resource }}"
"""

RETURN = """
See the respective resource module parameters for the tree.
"""

def main():
    """
    Main entry point for module execution

    :returns: ansible_facts
    """
    module = AnsibleModule(argument_spec=Facts.argument_spec,
                           supports_check_mode=True)
    warnings = list()

    connection = Connection(module._socket_path) #pylint: disable=W0212
    gather_subset = module.params['gather_subset']
    ansible_facts = Facts().get_facts(module, connection, gather_subset)
    module.exit_json(ansible_facts=ansible_facts, warnings=warnings)

if __name__ == '__main__':
    main()
