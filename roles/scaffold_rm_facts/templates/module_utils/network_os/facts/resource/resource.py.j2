{% set doc = rm['DOCUMENTATION'] | from_yaml %}
{% set config = doc.options.config %}

{% macro build_config(config) %}
{% if config.type == "list" %}
{% for key, value in config.suboptions.items() %}
{% if value.type == "str" and key != resource_key %}
{{ build_str(resource_singular, key, "config") }}{% endif %}
{% if value.type == "int" and key != resource_key %}
{{ build_int(resource_singular, key, "config") }}{% endif %}
{% if value.type == "list" %}
{{ build_list(resource_singular, key, value, "config", config.suboptions) }}{% endif %}
{# {% if value.type == "dict" %}
    {{ build_dict(resource_singular + "_node", key, value) | indent }}{% endif %} #}
{% endfor %}

{%- endif %}
{% endmacro %}

{% macro build_list(parent, key, value, config_parent, schema) %}
if {{ parent }}["{{ key }}"]:
    {{ config_parent }}["{{ key }}"] = []
    if not isinstance({{ parent }}["{{ key }}"], list):
        {{ key | replace("-","_") }}s = [{{ parent }}["{{ key }}"]]
    else:
        {{ key | replace("-","_") }}s = {{ parent }}["{{ key }}"]

    for {{ key | replace("-","_") }} in {{ key | replace("-","_") }}s:
        {{ key | replace("-", "_") }}_result = {}
{% for k, v in schema[key].suboptions.items() %}
{% if v.type == "str" %}
        {{ build_str(key | replace("-", "_"), k, key | replace("-", "_") + "_result") | indent | indent }}{% endif %}
{% if v.type == "int" %}
        {{ build_int(key | replace("-", "_"), k, key | replace("-", "_") + "_result") | indent | indent }}{% endif %}
{% if v.type == "list" %}
        {{ build_list(key | replace("-", "_"), k, v, key | replace("-", "_") + "_result", schema[key].suboptions) | indent | indent }}
{% endif %}
{% endfor %}
        {{ config_parent }}["{{ key }}"].append({{ key | replace("-", "_") }}_result)

{% endmacro %}

{% macro build_str(parent, key, config_parent) %}
if "{{ key }}" in {{ parent }}:
    {{ config_parent }}["{{ key }}"] = re.sub('^[a-z]+\:', '',{{ parent }}["{{ key }}"]) # regex to remove namespace declaration in values
{% endmacro %}

{% macro build_int(parent, key, config_parent) %}
if "{{ key }}" in {{ parent }}:
    {{ config_parent }}["{{ key }}"] = {{ parent }}["{{ key }}"]
{% endmacro %}


#
# -*- coding: utf-8 -*-
# {{ rm["COPYRIGHT"] }}
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
"""
The {{ network_os }} {{ resource }} fact class
It is in this file the configuration is collected from the device
for a given resource, parsed, and the facts tree is populated
based on the configuration.
"""
from __future__ import absolute_import, division, print_function


__metaclass__ = type


from copy import deepcopy

import re # pylint: disable=unused-import
from ansible.module_utils._text import to_bytes
from ansible.module_utils.basic import missing_required_lib
from ansible_collections.ansible.netcommon.plugins.module_utils.network.common.netconf import (
    remove_namespaces,
)
from ansible_collections.ansible.netcommon.plugins.module_utils.network.common import (
    utils,
)
from ansible_collections.ansible.netcommon.plugins.module_utils.network.netconf.netconf import (
    get,
)
from {{ import_path }}.{{ network_os }}.argspec.{{ resource }}.{{ resource }} import (
    {{ resource|capitalize }}Args,
)

try:
    from lxml import etree
    from lxml.etree import tostring as xml_to_string, fromstring

    HAS_LXML = True
except ImportError:
    from xml.etree.ElementTree import fromstring, tostring as xml_to_string

    HAS_LXML = False

try:
    import xmltodict

    HAS_XMLTODICT = True
except ImportError:
    HAS_XMLTODICT = False


class {{ resource|capitalize }}Facts(object):
    """The {{ network_os }} {{ resource }} fact class"""

    def __init__(self, module, subspec="config", options="options"):
        self._module = module
        self.argument_spec = {{ resource|capitalize }}Args.argument_spec
        spec = deepcopy(self.argument_spec)
        if subspec:
            if options:
                facts_argument_spec = spec[subspec][options]
            else:
                facts_argument_spec = spec[subspec]
        else:
            facts_argument_spec = spec

        self.generated_spec = utils.generate_dict(facts_argument_spec)

    def populate_facts(self, connection, ansible_facts, data=None):
        """Populate the facts for {{ resource }}
        :param connection: the device connection
        :param ansible_facts: Facts dictionary
        :param data: previously collected conf
        :rtype: dictionary
        :returns: facts
        """

        if not data:
            config_filter = """
                <{{ resource }}>
                </{{ resource }}>
                """
            data = get(self._module, filter=("subtree", config_filter))

        stripped = remove_namespaces(xml_to_string(data))
        data = fromstring(to_bytes(stripped, errors="surrogate_then_replace"))

        resources = data.xpath("/data/{{ resource }}/{{ resource_singular }}")

        objs = []
        for resource in resources:
            if resource:
                obj = self.render_config(self.generated_spec, resource)
                if obj:
                    objs.append(obj)

        facts = {}
        if objs:
            facts["{{ resource }}"] = []
            params = utils.validate_config(self.argument_spec, {"config": objs})
            for cfg in params["config"]:
                facts["{{ resource }}"].append(utils.remove_empties(cfg))

        ansible_facts["ansible_network_resources"].update(facts)
        return ansible_facts

    def render_config(self, spec, conf):
        """
        Render config as dictionary structure and delete keys
          from spec for null values

        :param spec: The facts tree, generated from the argspec
        :param conf: The configuration
        :rtype: dictionary
        :returns: The generated config
        """
        config = deepcopy(spec)
        {{ resource_singular }} = self._get_xml_dict(conf)["{{ resource_singular }}"]
        config["{{ resource_key }}"] = utils.get_xml_conf_arg(conf, "{{ resource_key }}")
        {{ build_config(config) | indent | indent }}

        return utils.remove_empties(config)

    def _get_xml_dict(self, xml_root):
        if not HAS_XMLTODICT:
            self._module.fail_json(msg=missing_required_lib("xmltodict"))
        xml_dict = xmltodict.parse(etree.tostring(xml_root), dict_constructor=dict)
        return xml_dict
