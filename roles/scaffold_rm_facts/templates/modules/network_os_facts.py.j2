#!/usr/bin/python
# -*- coding: utf-8 -*-
# {{ rm['COPYRIGHT'] }}
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
"""
The module file for {{ network_os }}_facts
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type


ANSIBLE_METADATA = {{ rm['ANSIBLE_METADATA'] | to_json }}


DOCUMENTATION = """
---
module: {{ network_os }}_facts
short_description: Get facts about {{ network_os }} devices.
description:
  - Collects facts from network devices running the {{ network_os }} operating
    system. This module places the facts gathered in the fact tree keyed by the
    respective resource name.  The facts module will always collect a
    base set of facts from the device and can enable or disable
    collection of additional facts.
author: {{ rm['DOCUMENTATION']['author'] }}
options:
  gather_subset:
    description:
    - When supplied, this argument will restrict the facts collected to a given subset.  Possible
      values for this argument include C(all), C(default), C(config), C(min). Can specify
      a list of values to include a larger subset.
    required: false
    default:
    - '!config'
    type: list
    elements: str
    version_added: "0.0.1"
  config_format:
    description:
    - The I(config_format) argument specifies the format of the configuration when
      serializing output from the device. This argument is applicable only when C(config)
      value is present in I(gather_subset). The I(config_format) should be supported
      by the {{ network_os }} version running on device. This value is not applicable while fetching
      old style facts that is when C(ofacts) value is present in value if I(gather_subset)
      value. This option is valid only for C(gather_subset) values.
    type: str
    required: false
    default: xml
    choices:
    - xml
    - text
    - json
  gather_network_resources:
    description:
    - When supplied, this argument will restrict the facts collected to a given subset.
      Possible values for this argument include all and the resources like interfaces,
      vlans etc. Can specify a list of values to include a larger subset. Values can
      also be used with an initial C(!) to specify that a specific subset should
      not be collected. Valid subsets are 'all', 'interfaces'
    required: false
    type: list
    elements: str
    version_added: "0.0.1"
"""

EXAMPLES = """
# Gather all facts
- {{ network_os }}_facts:
    gather_subset: all
    gather_network_resources: all

# Collect only the {{ resource }} facts
- {{ network_os }}_facts:
    gather_subset:
      - !all
      - !min
    gather_network_resources:
      - {{ resource }}

# Do not collect {{ resource }} facts
- {{ network_os }}_facts:
    gather_network_resources:
      - "!{{ resource }}"

# Collect {{ resource }} and minimal default facts
- {{ network_os }}_facts:
    gather_subset: min
    gather_network_resources: {{ resource }}
"""

RETURN = """
See the respective resource module parameters for the tree.
"""

from ansible.module_utils.basic import AnsibleModule
from {{ import_path }}.{{ network_os }}.argspec.facts.facts import FactsArgs
from {{ import_path }}.{{ network_os }}.facts.facts import Facts


def main():
    """
    Main entry point for module execution

    :returns: ansible_facts
    """
    module = AnsibleModule(argument_spec=FactsArgs.argument_spec,
                           supports_check_mode=True)
    warnings = ['default value for `gather_subset` '
                'will be changed to `min` from `!config` v2.11 onwards']

    result = Facts(module).get_facts()

    ansible_facts, additional_warnings = result
    warnings.extend(additional_warnings)

    module.exit_json(ansible_facts=ansible_facts, warnings=warnings)


if __name__ == '__main__':
    main()
