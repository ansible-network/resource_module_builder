#!/usr/bin/python
# -*- coding: utf-8 -*-
# {{ rm['COPYRIGHT'] }}
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for {{ network_os }}_{{ resource }}
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = """
---
{{ rm['DOCUMENTATION'] | to_pretty_yaml }}
"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
xml:
  description: The set of xml commands pushed to the remote device.
  returned: always
  type: list
  sample: ['<system xmlns="http://openconfig.net/yang/system"><config><hostname>foo</hostname></config></system>']
"""

from ansible.module_utils.basic import AnsibleModule
from {{ import_path }}.{{ network_os }}.argspec.{{ resource }}.{{ resource }} import (
    {{ resource|capitalize }}Args,
)
from {{ import_path }}.{{ network_os }}.config.{{ resource }}.{{ resource }} import (
    {{ resource|capitalize }},
)


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(
        argument_spec={{ resource|capitalize }}Args.argument_spec, supports_check_mode=True
    )

    result = {{ resource|capitalize }}(module).execute_module()
    module.exit_json(**result)


if __name__ == "__main__":
    main()
